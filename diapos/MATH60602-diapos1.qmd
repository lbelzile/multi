---
title: "Analyse exploratoire"
subtitle: "Analyse multidimensionnelle appliquée"
date: ""
author: "Léo Belzile"
institute: "HEC Montréal"
format: beamer
navigation: empty
colortheme: Flip
innertheme: Flip
outertheme: Flip
themeoptions: "bullet=circle, topline=true, shadow=false"
beamerarticle: false
pdf-engine: xelatex
cache: true
mainfont: "VisbyCF-Medium"
keep-tex: true
include-in-header: 
      text: |
        \usepackage{tabu}
---

# Analyse de données


```{r, out.width='100%', fig.cap="Allison Horst (CC BY 4.0)"}
knitr::include_graphics("figures/tidydata_5.jpg")
knitr::opts_chunk$set(
                      fig.width = 6,  # generated images
                      fig.pos = "t", 
                      fig.retina = 2,
                      fig.align = "center",
                      out.width = "100%",
                      dev = "png",
                      dpi = 200)
```

# Organisation du travail

```{r}
#| echo: false
#| eval: true
#| fig-cap: "Adapté de *R for Data Science*, H. Wickham et G. Grolemund"
#| out-width: '90%'
knitr::include_graphics("figures/r4ds_data-science_fr.png")
```

# Organisation des données

**Quelques bonnes pratiques**

![](figures/DataOrganizationinSpreadsheets.png)


> Karl W. Broman & Kara H. Woo (2018) Data Organization in Spreadsheets, The American Statistician, 72:1, 2-10, DOI: 10.1080/00031305.2017.1375989

# Nettoyage des données

- Toujours garder une copie des données brutes
- Automatiser le nettoyage


```{r}
cowplot::ggdraw() + 
  cowplot::draw_image("figures/excel-kenya-census-rohan.png", width = 0.5) + 
  cowplot::draw_image("figures/reproducibility.png", width = 0.5, x = 0.5)
```

Ne jamais ouvrir et modifier/sauvegarder les données dans Excel!

# Histoires d'horreur


```{r echo=FALSE, eval = TRUE, fig.cap="Capture d'écran d'un article du quotidien *The Guardian*", out.width='90%'}
knitr::include_graphics("figures/guardian-covid-excel.png")
```


# Données en format "tidy"

- variables en colonnes
- observations en lignes
- une seule mesure par cellule

```{r, out.width='70%', fig.cap="Allison Horst (CC BY 4.0)"}
knitr::include_graphics("figures/tidydata_1.jpg")
```

# Exemple

Est-ce que ces données de la Régie de l'Énergie sont en format 'tidy'?

```{r, out.width='100%'}
knitr::include_graphics("figures/regie-energie.png")
```


# Types de variables numériques

```{r, out.width='80%', fig.cap="Allison Horst (CC BY 4.0)"}
knitr::include_graphics("figures/continuous_discrete.png")
```

# Types de variables catégorielles

```{r, out.width='80%', fig.cap="Allison Horst (CC BY 4.0)"}
knitr::include_graphics("figures/nominal_ordinal_binary.png")
```




# Validation des données

Vérifier la présence de

- valeurs manquantes (`NA`, points, cellules vides, 999, -1, etc.)
- relations logiques (total, moyenne, etc.) entre variables
- variables catégorielles non déclarées
   - valeur entière (par ex., jours de la semaine)
   - chaînes de caractère

# Visualisation


> *Un simple graphique transmet plus d'information à l'analyste que n'importe quel autre option* 

:::: {.columns}

::: {.column width="80%"}

:::

::: {.column width="20%"}
 John Tukey
:::

::::


# Qu'est ce qu'un bon graphique?

> *communique des idées complexes avec clarté, précision et efficacité ... le graphique qui offre au lecteur le plus grand nombre d'idées le plus rapidement possible avec le moins d'encre et le plus petit espace possible*  

:::: {.columns}

::: {.column width="70%"}

:::

::: {.column width="30%"}
Edward Tufte, 1983
:::

::::



---

# Grammaire des graphiques


:::: {.columns}

::: {.column width="40%"}
```{r, out.width='80%'}
knitr::include_graphics("img/03/gg-book.jpg")
```
:::

::: {.column width="60%"}

- Éléments (couches):
    - données
    - application (variable $\to$ esthétique)
    - objets géométriques
    - transformations
    - positionnement
- Échelle / guide
- Coordonnées (facettes, système de coordonnés)

:::

::::



# Règles d'or 

Pour une visualisation effective:

1. le choix du graphique dépend du type de variable
2. soignez les apparences
3. portez une attention particulière à la perception visuelle humaine

# Règle 1: choix de graphiques avec une seule variable 

- continue: histogramme, densité
- discrète: diagramme en bâton
- catégorielle: diagramme en bâton (fréquence ou pourcentage)

---

```{r}
#| label: figure-renfe_barplot
#| fig-width: 6
#| fig-height: 4
#| fig.align: center
data(renfe, package = "hecmulti")
library(ggplot2)
ggplot(data = renfe, 
       aes(y = forcats::fct_rev(forcats::fct_infreq(classe)))) + 
  geom_bar(aes(x = ..count.. / sum(..count..)), 
           alpha = 0.5) +
  labs(subtitle = "Répartitions des billets selon la classe", 
       x = "", y = "")  +
  scale_x_continuous(expand = c(0,0), 
                     labels = scales::percent_format(accuracy = 1L)) + 
  theme_minimal() + 
  theme(panel.grid.major.y = element_blank(),
        plot.subtitle = element_text(hjust = 0))
   
```

---

```{r renfe_hist}
#| fig-width: 6
#| fig-height: 3.5
#| fig-align: 'center'
#| dev: png
#| dpi: 200
renfe |> 
  subset(tarif == "Promo") |>
  ggplot(aes(x = prix)) + 
    geom_histogram(aes(y = (..count..)/sum(..count..)), bins = 30) +
    geom_rug(sides = "b") + 
    labs(x = "prix (en euros)", 
         y = "",
         title = "Répartition du prix des billets de train",
         subtitle = "billets au tarif Promo entre Barcelone et Madrid.") +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1L)) + 
   scale_x_continuous(labels = scales::label_dollar(prefix = "", suffix = "€")) + 
   theme_minimal()
```


# Règle 1: choix de graphiques avec deux variables

- continues: nuage de points
- catégorielles: diagramme à bande (avec couleurs), carte thermique
- continue $\times$ catégorielle: boîte à moustache, graphique violon

# Boîte à moustaches


```{r, out.width='100%'}
knitr::include_graphics("figures/01-intro-boiteamoustache.png")
```


---




```{r}
#| label: renfe_boxplot
#| cache: true
#| echo: false
#| fig.width: 6
#| fig.height: 4
#| fig.align: 'center'
#| out.width: '100%'
#| dev: png
#| dpi: 200
renfe |> subset(tarif == "Promo") |>
    ggplot(aes(y = prix, x = classe, col = type)) + 
    geom_boxplot() + 
    labs(y = "",
         x = "classe des billets",
         col = "type de train",
         subtitle = "Prix (en euros) de billets au tarif Promo") + 
   scale_colour_viridis_d(option = "D") + 
   scale_y_continuous(
     labels = scales::label_dollar(prefix = "", 
                                   suffix = "€")) + 
   theme_minimal() + 
   theme(legend.position = "bottom")
```

---

```{r renfe_nuagepts_code}
#| fig.width: 6
#| fig.height: 4
#| fig.align: 'center'
#| out.width: '70%'
#| dev: png
#| dpi: 200
renfe |> subset(type != "REXPRESS") |>
    ggplot(aes(x = duree, y = prix, col = type)) + 
    geom_point() + 
    labs(y = "", 
         x = "durée de trajet (en minutes)",
         col = "type de train",
         subtitle = "Prix de billets de train en fonction de la durée de trajet") + 
   scale_colour_viridis_d() +
      scale_y_continuous(labels = scales::label_dollar(prefix = "", suffix = "€")) + 
   theme_minimal() +
   theme(legend.position = "bottom")
```

- Qu'est-ce qui cloche dans la représentation graphique précédente?
- Comment pourrait-on remédier aux problèmes soulevés?



# Règle 2: soignez les apparences

Certaines visualisations sont plus effectives/adéquates que d'autres


- votre graphique doit être interprétable uniquement avec la légende.
- inclure les noms de variables **et** les unités
- ajouter une description dans le texte et faire une référence croisée

# Éléments graphiques clés

- Titre et annotation
- Libellés et unités sur les axes
- Libellé de l'axe des $y$ en sous-titre
- Inverser les axes si les étiquettes trop longue (variable catégorielles)


# Règle 3: perception visuelle humaine

+ ratio longueur/largeur
+ taille de police suffisante pour lisibilité
+ espace entre bandes
+ étendu des axes (incluant ou pas zéro)
+ choix de couleurs 
   - noir/blanc avec contraste
   - palettes pour daltoniens
+ comparaison d'aires/superficies (difficile)
+ graphiques 3D / avec rotation superflue à éviter

# Problèmes de perceptions


```{r}
cowplot::ggdraw() + 
  cowplot::draw_image("figures/Trump-tweet-62917931.png", width = 0.5) + 
  cowplot::draw_image("figures/NOAA_tempete_a.jpg", width = 0.5, x = 0.5)
```


# Mauvaise palette de couleur

- Gauche: Carte originale de la NOAA en niveaux de gris: on voit clairement le problème de saturation

- Droite: solution potentielle avec palette de couleurs différente. 

```{r}
cowplot::ggdraw() + 
  cowplot::draw_image("figures/NOAA_tempete_c.png", width = 0.5) + 
  cowplot::draw_image("figures/NOAA_tempete_b.png", width = 0.5, x = 0.5)
```

(Source [Achim Zeileis](https://www.zeileis.org/news/dorian_rainbow/))

# Pourquoi créer des graphiques?

> *Les résumés numériques focalisent l'attention sur les valeurs attendues, les résumés graphiques sur les valeurs inattendues.* 

:::: {.columns}

::: {.column width="80%"}

:::
  
::: {.column width="20%"}
John Tukey
:::

::::




# Étapes de l'analyse exploratoire

1. Formuler des questions
2. Chercher des réponses à ces questions à l'aide de
    - statistiques descriptives
    - tableaux de contingence
    - graphiques
3. Infirmer ou confirmer nos intuitions
4. Raffiner les questions suite aux observations
5. Répéter le processus

Écrire un résumé des trouvailles et des aspects **importants** uniquement.





# Références complémentaires

Pour aller plus loin: 

- [Chapitre 1 de *Data Visualization: A practical introduction* par Kieran Healy](https://socviz.co/lookatdata.html#lookatdata)
- [*Fundamentals of Data Visualization* par Claus O. Wilke](https://serialmentor.com/dataviz/)
- [Chapitre 3 de _**R** for Data Science_ par Garrett Grolemund et Hadley Wickham](https://r4ds.had.co.nz/)


# Données manquantes

Plusieurs champs d'une base de donnée peuvent être manquants 

- non-réponse
- valeurs erronées (erreur d'encodage)
- perte de suivi et censure
- plusieurs versions de formulaires (question optionnelles)

# Pourquoi s'en préoccuper?

La plupart des procédures ne gèrent que les cas complets (toute observation avec des valeurs manquantes est éliminée).

Les données manquantes réduisent l'information disponible.

Sans traitement adéquat, les estimations seront **biaisées**.

# Références

- van Buuren, S. (2018). [*Flexible imputation of missing data*](https://stefvanbuuren.name/fimd/), CRC Press, 2e édition.
- Little, R. et D. Rubin (2019). *Statistical Analysis with Missing Data*, Wiley, 3e édition
- Schafer, J. L. (1997). *Analysis of Incomplete Multivariate Data*. Chapman & Hall / CRC.

Les valeurs manquantes dans un contexte de prédictions sont couvertes dans le cours MATH 60600.

# Classification des données manquantes (MCAR)

Cas 1: Données manquantes de façon complètement aléatoire (*missing completely at random*)

La probabilité que la valeur soit manquante ne dépend ni de la valeur, ni de celles des autres variables.

Exemple: questionnaire trop long, la personne ne répond pas à tout (sans lien avec les questions posées).

Hypothèse souvent irréaliste en pratique.

# Classification des données manquantes (MAR)

Cas 2: données manquantes de façon aléatoire (*missing at random*): la probabilité que la valeur soit manquante ne dépend pas de la valeur *une fois qu'on a contrôlé pour les autres variables*.

Exemple: les hommes sont plus susceptibles dans l'ensemble de divulguer leur âge que les femmes.

# Classification des données manquantes (MNAR)

Cas 3: données manquantes de façon non-aléatoire (*missing not at random*): la probabilité que la mesure soit manquante dépend de la valeur elle-même, pas déterminable avec d'autres variables

Exemple: une personne transgenre ne répond pas à la question genre (si seulement deux choix, homme/femme) et aucune autre question ne se rattache au genre ou à l'identité sexuelle. 

# Comment déterminer le type de données manquantes

Une personne ne divulgue pas son salaire? Données manquante de manière aléatoire ou non aléatoire?

Hypothèse pas testable, dépend du contexte et des variables auxiliaires disponibles.

# Valeur logique

Les données manquantes ont souvent une valeur logique:

- un client qui n'a pas de carte de crédit a un solde de 0!

D'où l'importance des validations d'usage et du nettoyage préliminaire de la base de données.


# Types de schémas de données manquantes

Matrice $n \times p$  (observations en lignes, variables en colonnes).

```{r}
#| eval: true
#| echo: false
#| out-width: '100%'
#| fig-height: 5
#| fig-width : 10
#| cache: true
library(patchwork)
library(ggplot2)
set.seed(1234)
tile <- expand.grid(1:8, 1:3)
colnames(tile) <- c("x", "y")
g1 <- ggplot(data = data.frame(tile, 
                               count = c(rep(0, 16), 
                                         rep(1, 3), 
                                         rep(0,5))),
             mapping = aes(y = factor(x), 
                           x = factor(y), 
                           fill = factor(count))) +
  geom_tile(colour = "white", linewidth = 2) +
  labs(x = "",
       y = "",
       fill = "",
       subtitle = "unidimensionnel") +
  scale_fill_discrete(palette = mice::mdc) + 
  scale_x_discrete(breaks = NULL, expand = c(0,0), labels = NULL) +
  scale_y_discrete(breaks = NULL, expand = c(0,0), labels = NULL) +
  theme_classic() +
  theme(legend.position = "none",
        axis.line = element_blank())

g2 <- ggplot(data = data.frame(tile, 
                               count = c(rep(0, 8), 
                                         rep(1, 2), 
                                         rep(0, 6), 
                                         rep(1, 4),
                                         rep(0, 4))),
             mapping = aes(y = factor(x), 
                           x = factor(y), 
                           fill = factor(count))) +
  geom_tile(colour = "white", linewidth = 2) +
  labs(x = "",
       y = "",
       fill = "",
       subtitle = "monotone") +
  scale_fill_discrete(palette = mice::mdc) + 
  scale_x_discrete(breaks = NULL, expand = c(0,0), labels = NULL) +
  scale_y_discrete(breaks = NULL, expand = c(0,0), labels = NULL) +
  theme_classic() +
    theme(legend.position = "none",
        axis.line = element_blank())
g3 <- ggplot(data = data.frame(tile, 
                               count = c(rep(0, 8), 
                                         rep(1, 5), 
                                         rep(0, 3), 
                                         rep(0, 5),
                                         rep(1, 3))),
             mapping = aes(y = factor(x), 
                           x = factor(y), 
                           fill = factor(count))) +
  geom_tile(colour = "white", linewidth = 2) +
  labs(x = "",
       y = "",
       fill = "",
       subtitle = "appariement") +
  scale_fill_discrete(palette = mice::mdc) + 
  scale_x_discrete(breaks = NULL, expand = c(0,0), labels = NULL) +
  scale_y_discrete(breaks = NULL, expand = c(0,0), labels = NULL) +
  theme_classic() +
    theme(legend.position = "none",
        axis.line = element_blank())
g4 <- ggplot(data = data.frame(tile, 
                               count = sample(c(0,1), 
                                              size = 24, 
                                              replace = TRUE, 
                                              prob = c(0.8, 0.2))),
             mapping = aes(y = factor(x), 
                           x = factor(y), 
                           fill = factor(count))) +
  geom_tile(colour = "white", linewidth = 2) +
  labs(x = "",
       y = "",
       fill = "",
       subtitle = "général") +
  scale_fill_discrete(palette = mice::mdc) + 
  scale_x_discrete(breaks = NULL, expand = c(0,0), labels = NULL) +
  scale_y_discrete(breaks = NULL, expand = c(0,0), labels = NULL) +
  theme_classic() +
    theme(legend.position = "none",
        axis.line = element_blank())

g1 + g2 + g3 + g4 + plot_layout(nrow = 1, byrow = FALSE)
```

\footnotesize

Les cases grises représentent des valeurs manquantes. Illustration adapté de la Figure 4.1 de van Buuren (2022)

# Analyse des cas complet

Retirer les observations avec données manquantes pour conserver les cas complets.

- Valide uniquement pour complètement aléatoire.
- On perd de la précision en utilisant moins d'observations.

Méthode par défaut dans les logiciels.


# Méthodes d'imputation


Imputation: remplacer les valeurs manquantes par une valeur judicieuse pour *combler les trous*.

> Le concept d'imputation est à la fois séduisant et dangereux (Dempster et Rubin, 1983)

 Par exemple, on remplacer la valeur manquante par la moyenne (variables continues) ou le mode (variables catégorielles).

Approche pas recommandée (pourquoi?)


# Faut-il toujours imputer?

Il faut utiliser son jugement. 


Une observation imputée ne remplacera jamais une vraie observation.

- Si la proportion d'observations manquantes est petite (moins de 5\%), on pourrait faire une analyse avec les cas complets (et valider au besoin en utilisant l'imputation multiple).
- Si la proportion de  valeurs manquantes est 30\%  et que cette proportion baisse à 3\% lorsque vous éliminez quelques variables peu importantes pour votre étude, alors procédez à leur élimination.



# Imputation par la moyenne

Dilution de la relation (corrélation) entre variables explicatives. Réduction de la variabilité.

```{r}
#| echo: false
#| eval: true
#| out-width: '90%'
#| fig-width: 8
#| fig-align: 'center'
#| fig-height: 4
library(ggplot2)
set.seed(1234)
nobs <- 400L
ventes <- runif(n = nobs, min = 400, max = 800) + 
  rlnorm(n = nobs, meanlog = 4, sdlog = 1) -100 + 
  TruncatedNormal::rtnorm(n = 1, 
              mu = seq(100, to = 300, length.out = nobs), 
              sd = seq(0, 100, length.out = nobs),
              lb = 0, ub = 1000)
nbvisiteurs <- sort(rpois(n = nobs, lambda = 40))
full <- data.frame(ventes = ventes, 
                   nbclients = nbvisiteurs)
manquants <- as.matrix(full)
amputer <- mice::ampute(data = manquants, prop = 0.25)
# manquants[sample(x = c(TRUE, FALSE),
#                          size = 2*nobs, 
#                          replace = TRUE,
#                          prob = c(0.15,0.85))] <- NA
manquants1 <- amputer$amp |> 
  tibble::as_tibble() |>
  dplyr::mutate(
    manquant = dplyr::case_when(
      is.na(nbclients) | is.na(ventes) ~ 1,
      TRUE ~ 2),
    manqventes = dplyr::case_when(
      is.na(ventes) ~ 1,
      TRUE ~ 2), 
    manqnbclients = dplyr::case_when(
      is.na(nbclients) ~ 1,
      TRUE ~ 2),
    ventes = dplyr::case_when(
      is.na(ventes) ~ mean(ventes, na.rm = TRUE),
      TRUE ~ ventes),
    nbclients = dplyr::case_when(
      is.na(nbclients) ~ mean(nbclients, na.rm = TRUE),
      TRUE ~ nbclients))
g1 <- ggplot(data = manquants1,
       aes(x = nbclients, 
           y = ventes, 
           color = factor(1-manquant),
           shape = factor(manquant))) + 
  geom_point(size = 2) + 
    scale_shape_manual(values = c(1,20)) +
  scale_colour_discrete(palette = mice::mdc) +
  labs(y = "ventes",
       x = "nombre de clients") +
  theme_classic() +
  theme(legend.position = "none")

g2 <- ggplot(data = manquants1,
       aes(x = ventes,
           #y = after_stat(density),
           fill = factor(1-manqventes),
           group = factor(1-manqventes))) + 
  geom_histogram(alpha = 0.8) +
  scale_y_continuous(expand = c(0,0)) + 
  scale_fill_discrete(palette = mice::mdc) +
  labs(y = "") +
  theme_classic() +
  theme(legend.position = "none")
library(patchwork)
g2 + g1 
```


# Récapitulatif

- Les données manquantes réduisent la quantité d'information disponible et augmentent l'incertitude.
- On ne peut **pas** les ignorer (étude des cas complets) sans biaiser les interprétations et réduire la quantité d'information disponible.
- On distingue plusieurs types de mécanismes qui génèrent des données manquantes.
- Nous couvrirons les méthodes d'imputation dans le cadre de la régression logistique.


